const mix = require('laravel-mix');
const fs = require('fs');
const path = require('path');

// Set the public path to the build directory
mix.setPublicPath('./build');

// Process CSS files
mix.postCss('src/css/app.css', 'css/app.css', [
    require('postcss-import'),
    require('tailwindcss')('./tailwind.config.js'),
    require('autoprefixer'),
]);

// Process JavaScript files
mix.js('src/js/app.js', 'js');

// Disable success notifications
mix.disableSuccessNotifications();

// Source maps only in development
mix.sourceMaps(!mix.inProduction());

// Configure webpack with watch options to prevent infinite compilation loops
mix.webpackConfig({
    watchOptions: {
        ignored: [
            path.resolve(__dirname, 'build/**'),
            path.resolve(__dirname, 'node_modules/**'),
            path.resolve(__dirname, '.git/**'),
            path.resolve(__dirname, 'src/blocks/**'),
            path.resolve(__dirname, 'build/blocks/**')
        ]
    },
    stats: {
        children: false
    }
});

// Create theme version file in production mode
if (mix.inProduction()) {
    mix.then(() => {
        // Create a unique identifier using timestamp and random string for better versioning
        const timestamp = new Date().toISOString().replace(/[^0-9]/g, '').substring(0, 14);
        const randomPart = Math.random().toString(36).substring(2, 7);
        const uniqueId = `${timestamp}-${randomPart}`;

        // Prepare PHP file with version constant
        const phpContent = `<?php
/**
 *
 * Theme Version Identifier
 *
 * Auto-generated by build process
 * Do not edit manually
 */

abspath_check();

define('THEME_VERSION', '${uniqueId}');
`;

        // Save the PHP file
        const outputPath = path.join(__dirname, 'versioning.php');
        fs.writeFileSync(outputPath, phpContent);
    });
}
